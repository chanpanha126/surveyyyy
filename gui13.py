
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

import tkinter as tk
from pathlib import Path
from tkinter import messagebox
from datetime import datetime
import re
import traceback
import sqlite3
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"/Users/chanpanha/Desktop/survey/build/assets/frame13")

def search_appointments():
    try:
        # 1. Get Date Input and Validate
        date_str = entry_1.get("1.0", tk.END).strip()
        
        # Use regex pattern to validate date
        date_pattern = r"^(0[1-9]|1[0-2])/(0[1-9]|[12][0-9]|3[01])/([12][0-9]{3})$"
        if not re.match(date_pattern, date_str):
            raise ValueError("Invalid date format")

        # 2. Database Connection and Query (Modified)
        with sqlite3.connect("add_appointment.db") as conn:  
            cursor = conn.cursor()

            # Pass date_str directly to query without conversion
            cursor.execute("SELECT name, app_id, doctor_name FROM add_appointment_info WHERE date_time = ?", (date_str,))  
            results = cursor.fetchall()
    

        # 3. Display Results
        if results:
            message = "\n".join(f"Name: {name}, App ID: {app_id}, Doctor: {doctor_name}" for name, app_id, doctor_name in results)
            messagebox.showinfo("Appointments Found", message)

            # Destroy the current window
            window.destroy()

            # Import and show gui1.py
            import build.home as home  # Make sure gui1.py is in the same directory
            home.gui1() 
        else:
            messagebox.showinfo("No Appointments", f"No appointments found for {date_str}")

        # Move these outside the if/else block
        import build.home as home  # Import module
        window.destroy()  # Destroy window

    except ValueError:
        messagebox.showerror("Invalid Date", "Please enter date in mm/dd/yyyy format.")
        entry_1.delete("1.0", tk.END) 
    except sqlite3.Error as e:
        messagebox.showerror("Database Error", f"Error occurred: {e}")
        traceback.print_exc()  # Print error for debugging

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()

window.geometry("1366x768")
window.configure(bg = "#FFFFFF")


canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 768,
    width = 1366,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    735.0,
    76.0,
    image=image_image_1
)

canvas.create_text(
    271.0,
    183.0,
    anchor="nw",
    text="Enter the Appointment Date (mm/dd/yyyy) *",
    fill="#000000",
    font=("Inter", 24 * -1)
)
def gui1():
    window.destroy()
    import build.home as home


entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    613.5,
    268.5,
    image=entry_image_1
)
entry_1 = Text(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0,
    font=("Inter", 24 * -1)  # Make font size more readable
)
entry_1.place(
    x=290.5,
    y=234.0,
    width=646.0,
    height=67.0
)
def gui1():
    window.destroy()
    import build.home as home
button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=gui1,
    relief="flat"
)
button_1.place(
    x=1781.5,
    y=656.5,
    width=396.0,
    height=78.0
)
def gui1():
    window.destroy()
    import build.home as home
button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=search_appointments,  
    relief="flat"
)
button_2.place(
    x=537.0,
    y=639.0,
    width=396.0,
    height=78.0
)
window.resizable(False, False)
window.mainloop()
